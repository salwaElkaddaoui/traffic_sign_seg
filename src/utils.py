import json
import numpy as np
import cv2
import os

def polygon_to_mask(filepath: str, save_path: str, label_map: dict, show: bool = True)->None:
    """
    Converts a JSON annotation file (from LabelMe) into a segmentation mask with integer-encoded classes.

    Args:
        filepath (str): Path to the JSON annotation file generated by LabelMe.
        save_path (str): Destination path to save the generated mask image.
        label_map (dict): A dictionary mapping class indices (as strings) to class names, e.g., {'0': 'dog', '1': 'cat'}.
        show (bool): If True, displays the generated mask.

    Returns:
        None.
    """
    with open(filepath, 'r') as file:
        data = json.load(file)

    height, width = data['imageHeight'], data['imageWidth']
    mask = np.zeros((height, width), dtype=np.uint8)

    # Invert the label map to map class name to index
    name_to_index = {v: int(k) for k, v in label_map.items()}

    for shape in data['shapes']:
        label_name = shape['label']
        class_index = name_to_index.get(label_name)

        if class_index is None:
            raise ValueError(f"Label '{label_name}' not found in label_map.")

        polygon_points = np.array([list(map(int, point)) for point in shape['points']])
        mask = cv2.fillPoly(mask, [polygon_points], color=class_index)

    if show:
        small_mask = cv2.resize(mask, (width // 10, height // 10), interpolation=cv2.INTER_NEAREST)
        cv2.imshow('mask', (small_mask * (255 // (len(label_map) or 1))).astype(np.uint8))
        cv2.waitKey(0)
        cv2.destroyAllWindows()

    cv2.imwrite(save_path, mask)


def generate_masks_from_folder(input_folder:str, output_folder:str, labelmap_path:str, show:bool)->None:
    """
    Generates segmentation masks from all LabelMe JSON annotation files in a folder.

    Args:
        input_folder (str): Path to the folder containing LabelMe JSON annotation files.
        output_folder (str): Path to the folder where generated mask images will be saved.
        labelmap_path (str): Path to a JSON file mapping class indices (as strings) to class names.
        show (bool): If True, displays each generated mask resized for visualization.

    Returns:
        None
    """
    with open(labelmap_path, 'r') as file:
        labelmap = json.load(file)

    # apply function to all images
    annotation_filenames = os.listdir(input_folder)
    for f in annotation_filenames:
        polygon_to_mask(filepath=os.path.join(input_folder, f), 
                        label_map=labelmap, 
                        save_path=os.path.join(output_folder, f.replace("json", "png")),
                        show=show)

